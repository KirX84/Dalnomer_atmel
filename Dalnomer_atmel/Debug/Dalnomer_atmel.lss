
Dalnomer_atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000526  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800114  00800114  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d60  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d6  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d9  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000022b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000715  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000415  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002fce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	75 c1       	rjmp	.+746    	; 0x334 <__vector_18>
  4a:	00 00       	nop
  4c:	86 c1       	rjmp	.+780    	; 0x35a <__vector_19>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	98 c1       	rjmp	.+816    	; 0x3a2 <__vector_28>
  72:	00 00       	nop
  74:	f4 c1       	rjmp	.+1000   	; 0x45e <__vector_29>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e2       	ldi	r30, 0x26	; 38
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 33       	cpi	r26, 0x35	; 53
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	03 d2       	rcall	.+1030   	; 0x4ee <main>
  e8:	1c c2       	rjmp	.+1080   	; 0x522 <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <_Z8UARTInitv>:
		if ((Error_j == 0) && (256 - CS % 256 == Otvet_Lazer[11])) {
			Otvet_Lazer_TXT[7] = 0x0D;              //Ставим символ переноса в конце строки
			Otvet_Lazer_TXT[2] = 0x2C;              //Ставим запятую вместо точки в число на выдачу
			Serial.write(Otvet_Lazer_TXT,8);
		}*/
}
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	85 ec       	ldi	r24, 0xC5	; 197
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	10 82       	st	Z, r1
  fc:	84 ec       	ldi	r24, 0xC4	; 196
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	27 e6       	ldi	r18, 0x67	; 103
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
 106:	81 ec       	ldi	r24, 0xC1	; 193
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	28 eb       	ldi	r18, 0xB8	; 184
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
 110:	81 ec       	ldi	r24, 0xC1	; 193
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e1       	ldi	r18, 0x18	; 24
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
 11a:	82 ec       	ldi	r24, 0xC2	; 194
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	26 e0       	ldi	r18, 0x06	; 6
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	8d ec       	ldi	r24, 0xCD	; 205
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	10 82       	st	Z, r1
 12c:	8c ec       	ldi	r24, 0xCC	; 204
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	27 e6       	ldi	r18, 0x67	; 103
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	89 ec       	ldi	r24, 0xC9	; 201
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	28 eb       	ldi	r18, 0xB8	; 184
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	89 ec       	ldi	r24, 0xC9	; 201
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	28 e1       	ldi	r18, 0x18	; 24
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
 14a:	8a ec       	ldi	r24, 0xCA	; 202
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	26 e0       	ldi	r18, 0x06	; 6
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
 154:	00 00       	nop
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_Z12UARTSend_USBPhh>:
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <_Z12UARTSend_USBPhh+0x6>
 162:	1f 92       	push	r1
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	89 83       	std	Y+1, r24	; 0x01
 16c:	6b 83       	std	Y+3, r22	; 0x03
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <sendDataPtr_USB+0x1>
 176:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <sendDataPtr_USB>
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <numOfDataToSend_USB>
 180:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <numOfDataSended_USB>
 184:	00 00       	nop
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <_Z12UARTSend_DalPhh>:
void UARTSend_Dal(uint8_t *pSendData, uint8_t nNumOfDataToSend)               //отправить бит
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <_Z12UARTSend_DalPhh+0x6>
 198:	1f 92       	push	r1
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	9a 83       	std	Y+2, r25	; 0x02
 1a0:	89 83       	std	Y+1, r24	; 0x01
 1a2:	6b 83       	std	Y+3, r22	; 0x03
	sendDataPtr_Dal = pSendData;
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	9a 81       	ldd	r25, Y+2	; 0x02
 1a8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <sendDataPtr_Dal+0x1>
 1ac:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <sendDataPtr_Dal>
	numOfDataToSend_Dal = nNumOfDataToSend;
 1b0:	8b 81       	ldd	r24, Y+3	; 0x03
 1b2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <numOfDataToSend_Dal>
	numOfDataSended_Dal = 0;
 1b6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <numOfDataSended_Dal>
	UDR1 = sendDataPtr_Dal[numOfDataSended_Dal];
 1ba:	8e ec       	ldi	r24, 0xCE	; 206
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <sendDataPtr_Dal>
 1c2:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <sendDataPtr_Dal+0x1>
 1c6:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <numOfDataSended_Dal>
 1ca:	22 2f       	mov	r18, r18
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	24 0f       	add	r18, r20
 1d0:	35 1f       	adc	r19, r21
 1d2:	f9 01       	movw	r30, r18
 1d4:	20 81       	ld	r18, Z
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
		//sendDataPtr_Dal++;
		numOfDataSended_Dal++;
 1da:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <numOfDataSended_Dal>
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <numOfDataSended_Dal>
    UCSR0B = (1<<UDRIE0);
 1e4:	81 ec       	ldi	r24, 0xC1	; 193
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	20 e2       	ldi	r18, 0x20	; 32
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
	//while (numOfDataToSend_Dal != numOfDataSended_Dal);
}
 1ee:	00 00       	nop
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <_Z11UARTGet_Dalv>:

void UARTGet_Dal()                  //получить бит
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <_Z11UARTGet_Dalv+0x6>
 202:	00 d0       	rcall	.+0      	; 0x204 <_Z11UARTGet_Dalv+0x8>
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==48) && (Otvet_Lazer[6]==0x2E)) 
 208:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 20c:	80 38       	cpi	r24, 0x80	; 128
 20e:	09 f0       	breq	.+2      	; 0x212 <_Z11UARTGet_Dalv+0x16>
 210:	89 c0       	rjmp	.+274    	; 0x324 <_Z11UARTGet_Dalv+0x128>
 212:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x1>
 216:	86 30       	cpi	r24, 0x06	; 6
 218:	09 f0       	breq	.+2      	; 0x21c <_Z11UARTGet_Dalv+0x20>
 21a:	84 c0       	rjmp	.+264    	; 0x324 <_Z11UARTGet_Dalv+0x128>
 21c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 220:	83 38       	cpi	r24, 0x83	; 131
 222:	09 f0       	breq	.+2      	; 0x226 <_Z11UARTGet_Dalv+0x2a>
 224:	7f c0       	rjmp	.+254    	; 0x324 <_Z11UARTGet_Dalv+0x128>
 226:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__data_end+0x3>
 22a:	80 33       	cpi	r24, 0x30	; 48
 22c:	09 f0       	breq	.+2      	; 0x230 <_Z11UARTGet_Dalv+0x34>
 22e:	7a c0       	rjmp	.+244    	; 0x324 <_Z11UARTGet_Dalv+0x128>
 230:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x6>
 234:	8e 32       	cpi	r24, 0x2E	; 46
 236:	09 f0       	breq	.+2      	; 0x23a <_Z11UARTGet_Dalv+0x3e>
 238:	75 c0       	rjmp	.+234    	; 0x324 <_Z11UARTGet_Dalv+0x128>
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
 23a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x1>
 246:	88 2f       	mov	r24, r24
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	28 0f       	add	r18, r24
 24c:	39 1f       	adc	r19, r25
 24e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	28 0f       	add	r18, r24
 258:	39 1f       	adc	r19, r25
 25a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__data_end+0x3>
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	82 0f       	add	r24, r18
 264:	93 1f       	adc	r25, r19
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	89 83       	std	Y+1, r24	; 0x01
		Error_j = 0;
 26a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <Error_j>
		for (int i=0; i <= 6; i++) 
 26e:	1c 82       	std	Y+4, r1	; 0x04
 270:	1b 82       	std	Y+3, r1	; 0x03
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	9c 81       	ldd	r25, Y+4	; 0x04
 276:	07 97       	sbiw	r24, 0x07	; 7
 278:	8c f5       	brge	.+98     	; 0x2dc <_Z11UARTGet_Dalv+0xe0>
		{
			j = Otvet_Lazer[i+4];
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	9c 81       	ldd	r25, Y+4	; 0x04
 27e:	04 96       	adiw	r24, 0x04	; 4
 280:	8c 5e       	subi	r24, 0xEC	; 236
 282:	9e 4f       	sbci	r25, 0xFE	; 254
 284:	fc 01       	movw	r30, r24
 286:	80 81       	ld	r24, Z
 288:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <j>
			CS=CS+j;
 28c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <j>
 290:	88 2f       	mov	r24, r24
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	29 81       	ldd	r18, Y+1	; 0x01
 296:	3a 81       	ldd	r19, Y+2	; 0x02
 298:	82 0f       	add	r24, r18
 29a:	93 1f       	adc	r25, r19
 29c:	9a 83       	std	Y+2, r25	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
 2a0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <j>
 2a4:	80 33       	cpi	r24, 0x30	; 48
 2a6:	20 f0       	brcs	.+8      	; 0x2b0 <_Z11UARTGet_Dalv+0xb4>
 2a8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <j>
 2ac:	8b 33       	cpi	r24, 0x3B	; 59
 2ae:	20 f0       	brcs	.+8      	; 0x2b8 <_Z11UARTGet_Dalv+0xbc>
 2b0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <j>
 2b4:	8e 32       	cpi	r24, 0x2E	; 46
 2b6:	49 f4       	brne	.+18     	; 0x2ca <_Z11UARTGet_Dalv+0xce>
 2b8:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <j>
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	9c 81       	ldd	r25, Y+4	; 0x04
 2c0:	80 5e       	subi	r24, 0xE0	; 224
 2c2:	9e 4f       	sbci	r25, 0xFE	; 254
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <_Z11UARTGet_Dalv+0xd4>
			else Error_j=1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <Error_j>
{
	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==48) && (Otvet_Lazer[6]==0x2E)) 
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		Error_j = 0;
		for (int i=0; i <= 6; i++) 
 2d0:	8b 81       	ldd	r24, Y+3	; 0x03
 2d2:	9c 81       	ldd	r25, Y+4	; 0x04
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	9c 83       	std	Y+4, r25	; 0x04
 2d8:	8b 83       	std	Y+3, r24	; 0x03
 2da:	cb cf       	rjmp	.-106    	; 0x272 <_Z11UARTGet_Dalv+0x76>
			j = Otvet_Lazer[i+4];
			CS=CS+j;
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			else Error_j=1;
		}
		if ((Error_j == 0) && (256 - CS % 256 == Otvet_Lazer[11])) 
 2dc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Error_j>
 2e0:	88 23       	and	r24, r24
 2e2:	01 f5       	brne	.+64     	; 0x324 <_Z11UARTGet_Dalv+0x128>
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	9a 81       	ldd	r25, Y+2	; 0x02
 2e8:	90 78       	andi	r25, 0x80	; 128
 2ea:	99 23       	and	r25, r25
 2ec:	1c f4       	brge	.+6      	; 0x2f4 <_Z11UARTGet_Dalv+0xf8>
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	9f 6f       	ori	r25, 0xFF	; 255
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	9c 01       	movw	r18, r24
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	ac 01       	movw	r20, r24
 2fc:	42 1b       	sub	r20, r18
 2fe:	53 0b       	sbc	r21, r19
 300:	9a 01       	movw	r18, r20
 302:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <__data_end+0xb>
 306:	88 2f       	mov	r24, r24
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	28 17       	cp	r18, r24
 30c:	39 07       	cpc	r19, r25
 30e:	51 f4       	brne	.+20     	; 0x324 <_Z11UARTGet_Dalv+0x128>
		{
			Otvet_Lazer_TXT[7] = 0x0D;              //Ставим символ переноса в конце строки
 310:	8d e0       	ldi	r24, 0x0D	; 13
 312:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Otvet_Lazer_TXT+0x7>
			Otvet_Lazer_TXT[2] = 0x2C;              //Ставим запятую вместо точки в число на выдачу
 316:	8c e2       	ldi	r24, 0x2C	; 44
 318:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Otvet_Lazer_TXT+0x2>
			UARTSend_USB(Otvet_Lazer_TXT,8);
 31c:	68 e0       	ldi	r22, 0x08	; 8
 31e:	80 e2       	ldi	r24, 0x20	; 32
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	1c df       	rcall	.-456    	; 0x15c <_Z12UARTSend_USBPhh>
		}
	}
}
 324:	00 00       	nop
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <__vector_18>:

ISR(USART0_RX_vect)    //прерывание Прием окончен(USB)
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
    Otvet_Lazer[10] = Otvet_Lazer[11];
    Otvet_Lazer[11] = UDR0;
	receivedDataPtr_USB++;
	numOfDataReceived_USB++;*/

}
 348:	00 00       	nop
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	0f 90       	pop	r0
 350:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <__vector_19>:

ISR(USART0_UDRE_vect)   //прерывание Передача окончена(USB)
{
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
	rx_data = UDR0;
 376:	86 ec       	ldi	r24, 0xC6	; 198
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	80 81       	ld	r24, Z
 37e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <rx_data>
	rx_flag = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <rx_flag>
}
 388:	00 00       	nop
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_28>:
ISR(USART1_RX_vect)    //прерывание Прием окончен(Дальномер)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
	Otvet_Lazer[0] = Otvet_Lazer[1];
 3ce:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x1>
 3d2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	Otvet_Lazer[1] = Otvet_Lazer[2];
 3d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 3da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <__data_end+0x1>
	Otvet_Lazer[2] = Otvet_Lazer[3];
 3de:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__data_end+0x3>
 3e2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end+0x2>
	Otvet_Lazer[3] = Otvet_Lazer[4];
 3e6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end+0x4>
 3ea:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <__data_end+0x3>
	Otvet_Lazer[4] = Otvet_Lazer[5];
 3ee:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__data_end+0x5>
 3f2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x4>
	Otvet_Lazer[5] = Otvet_Lazer[6];
 3f6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x6>
 3fa:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <__data_end+0x5>
	Otvet_Lazer[6] = Otvet_Lazer[7];
 3fe:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__data_end+0x7>
 402:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x6>
	Otvet_Lazer[7] = Otvet_Lazer[8];
 406:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end+0x8>
 40a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <__data_end+0x7>
	Otvet_Lazer[8] = Otvet_Lazer[9];
 40e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <__data_end+0x9>
 412:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x8>
	Otvet_Lazer[9] = Otvet_Lazer[10];
 416:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end+0xa>
 41a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <__data_end+0x9>
	Otvet_Lazer[10] = Otvet_Lazer[11];
 41e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <__data_end+0xb>
 422:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end+0xa>
	Otvet_Lazer[11] = UDR1;
 426:	8e ec       	ldi	r24, 0xCE	; 206
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	80 81       	ld	r24, Z
 42e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <__data_end+0xb>
	UARTGet_Dal();
 432:	e4 de       	rcall	.-568    	; 0x1fc <_Z11UARTGet_Dalv>
}
 434:	00 00       	nop
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_29>:

ISR(USART1_UDRE_vect)   //прерывание Передача окончена(Дальномер)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
	numOfDataSended_Dal++;
 482:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <numOfDataSended_Dal>
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <numOfDataSended_Dal>
	if(numOfDataToSend_Dal == numOfDataSended_Dal)
 48c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <numOfDataToSend_Dal>
 490:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <numOfDataSended_Dal>
 494:	98 17       	cp	r25, r24
 496:	51 f4       	brne	.+20     	; 0x4ac <__vector_29+0x4e>
	{
		UCSR1B &=~(1<<UDRIE1);
 498:	89 ec       	ldi	r24, 0xC9	; 201
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	29 ec       	ldi	r18, 0xC9	; 201
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	2f 7d       	andi	r18, 0xDF	; 223
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
	{
		UDR1 = sendDataPtr_Dal[numOfDataSended_Dal];
		//sendDataPtr_Dal++;
		//numOfDataSended_Dal++;
	}
}
 4aa:	10 c0       	rjmp	.+32     	; 0x4cc <__vector_29+0x6e>
	{
		UCSR1B &=~(1<<UDRIE1);
	}
	else
	{
		UDR1 = sendDataPtr_Dal[numOfDataSended_Dal];
 4ac:	8e ec       	ldi	r24, 0xCE	; 206
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <sendDataPtr_Dal>
 4b4:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <sendDataPtr_Dal+0x1>
 4b8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <numOfDataSended_Dal>
 4bc:	22 2f       	mov	r18, r18
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	24 0f       	add	r18, r20
 4c2:	35 1f       	adc	r19, r21
 4c4:	f9 01       	movw	r30, r18
 4c6:	20 81       	ld	r18, Z
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
		//sendDataPtr_Dal++;
		//numOfDataSended_Dal++;
	}
}
 4cc:	00 00       	nop
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	9f 91       	pop	r25
 4d8:	8f 91       	pop	r24
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <main>:


int main(void)
{
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
	UARTInit();
 4f6:	fa dd       	rcall	.-1036   	; 0xec <_Z8UARTInitv>
	UARTSend_Dal(Lazer_mm,5);
 4f8:	65 e0       	ldi	r22, 0x05	; 5
 4fa:	84 e0       	ldi	r24, 0x04	; 4
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	49 de       	rcall	.-878    	; 0x192 <_Z12UARTSend_DalPhh>
	UARTSend_Dal(Lazer_0c,5);
 500:	65 e0       	ldi	r22, 0x05	; 5
 502:	89 e0       	ldi	r24, 0x09	; 9
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	45 de       	rcall	.-886    	; 0x192 <_Z12UARTSend_DalPhh>
	UARTSend_Dal(Lazer_1g,5);
 508:	65 e0       	ldi	r22, 0x05	; 5
 50a:	8e e0       	ldi	r24, 0x0E	; 14
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	41 de       	rcall	.-894    	; 0x192 <_Z12UARTSend_DalPhh>
	UARTSend_Dal(Lazer_start,5);
 510:	65 e0       	ldi	r22, 0x05	; 5
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	3d de       	rcall	.-902    	; 0x192 <_Z12UARTSend_DalPhh>
 518:	80 e0       	ldi	r24, 0x00	; 0
	  _delay_ms(5000);
	  LED_PORT=1<<LED;
	  _delay_ms(5000); 
	  
  }*/
}
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <_exit>:
 522:	f8 94       	cli

00000524 <__stop_program>:
 524:	ff cf       	rjmp	.-2      	; 0x524 <__stop_program>
